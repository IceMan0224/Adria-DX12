# scripts/generate_cmake_lists.py

import os 

def generate_list_for_folder(root_folder, output_file, cmake_variable_name, base_path_in_cmake):
    """
    Scans a directory recursively and writes a CMake 'set()' command to a file.
    Args:
        root_folder (str): The actual folder to scan for source files (e.g., "Adria/src/Rendering").
        output_file (str): The path to the .cmake file to be generated (e.g., "Adria/cmake/RenderingFiles.cmake").
        cmake_variable_name (str): The name of the CMake variable for the list (e.g., "ADRIA_RENDERING_SOURCES").
        base_path_in_cmake (str): The prefix for the file paths inside the CMake file (e.g., "src/Rendering").
    """
    print(f"Generating list for '{cmake_variable_name}' from '{root_folder}'...")
    found_files = []

    for dirpath, _, filenames in os.walk(root_folder):
        for filename in filenames:
            if filename.endswith(('.cpp', '.h', '.hpp', '.inl')):
                full_path = os.path.join(dirpath, filename)
                relative_path = os.path.relpath(full_path, root_folder)
                cmake_path = os.path.join(base_path_in_cmake, relative_path).replace('\\', '/')
                
                found_files.append(cmake_path)

    found_files.sort()

    with open(output_file, 'w') as f:
        f.write("# This file is auto-generated by a Python script. DO NOT EDIT MANUALLY.\n\n")
        f.write(f"set({cmake_variable_name}\n")
        for path in found_files:
            f.write(f'    "{path}"\n')
        f.write(")\n")
    print(f"-> Success! Wrote {len(found_files)} files to '{output_file}'.")


if __name__ == "__main__":
    generate_list_for_folder(
        root_folder="C:\\Users\\Mate\\Desktop\\Projekti\\Adria\\Adria\\Graphics",
        output_file="C:\\Users\\Mate\\Desktop\\Projekti\\Adria\\Adria\\Saved\\cmake\\GraphicsFiles.cmake",
        cmake_variable_name="ADRIA_GRAPHICS_SOURCES",
        base_path_in_cmake="${CMAKE_CURRENT_SOURCE_DIR}/Graphics"
    )